<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Widget Algorithm Builder</title>
  <style>
    * { box-sizing: border-box; }
    body {
      margin: 0;
      font-family: 'Segoe UI', sans-serif;
      background: #ffffff;
      color: #333;
    }
    .container {
      max-width: 1200px;
      margin: 2rem auto;
      padding: 0 1rem;
      display: flex;
      flex-direction: column;
      gap: 2rem;
    }
    .top-panel {
      display: flex;
      gap: 2rem;
    }
    .left-panel {
      flex: 1;
      position: relative;
    }
    .field-group {
      margin-bottom: 2rem;
      position: relative;
    }
    label {
      display: block;
      margin-bottom: 0.25rem;
      font-size: 11px;
      font-weight: 400;
      color: #555;
    }
    .theme-input {
      position: relative;
      border-radius: 32px;
      padding: 2px;
      background: linear-gradient(90deg, #e0c3fc, #8ec5fc);
      transition: background 0.4s ease;
    }
    .theme-input input {
      background: white;
      border-radius: 32px;
      padding: 0.75rem 1.5rem;
      width: 100%;
      font-size: 1rem;
      border: none;
      outline: none;
    }
    .button-bar {
      margin-top: 2rem;
      display: flex;
      gap: 1rem;
    }
    button {
      padding: 0.75rem 1.5rem;
      font-size: 1rem;
      border: none;
      border-radius: 6px;
      cursor: pointer;
    }
    .save-button {
      background-color: #6400e4;
      color: white;
    }
    .cancel-button {
      background-color: #ddd;
      color: #333;
    }
    .modal {
      display: none;
      position: fixed;
      z-index: 100;
      left: 0;
      top: 0;
      width: 100vw;
      height: 100vh;
      background: rgba(0, 0, 0, 0.5);
      justify-content: center;
      align-items: center;
    }
    .modal-content {
      background: white;
      padding: 2rem;
      border-radius: 8px;
      min-width: 300px;
    }
    .modal.show {
      display: flex;
    }
    #settings-toggle {
      cursor: pointer;
      color: #555;
      font-size: 1.25rem;
      position: absolute;
      top: 0;
      right: 0;
      z-index: 10;
    }
    .preview-section {
      background: #f4f4f8;
      padding: 2rem;
      border-radius: 8px;
    }
    .products-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
      gap: 1.5rem;
      width: 100%;
    }
    .product-card {
      display: flex;
      flex-direction: column;
      align-items: center;
      text-decoration: none;
      color: inherit;
      background: white;
      border-radius: 12px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.05);
      padding: 1rem;
      text-align: center;
    }
    .product-card img {
      width: 100%;
      height: auto;
      border-radius: 8px;
      margin-bottom: 0.5rem;
    }
    .product-card .name {
      font-size: 1rem;
      font-weight: 500;
      margin-bottom: 0.25rem;
    }
    .product-card .price {
      color: #888;
      font-size: 0.9rem;
    }
    .error-message {
      color: #c00;
      margin-top: 1rem;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="top-panel">
      <div class="left-panel">
        <div id="settings-toggle" title="Open Settings">⚙️</div>
        <div class="field-group">
          <label for="widget-theme">Algorithm Theme</label>
          <div class="theme-input">
            <input type="text" id="widget-theme" placeholder="Describe your theme...">
          </div>
        </div>
        <div class="button-bar">
          <button class="save-button" id="save-algo">Save Algorithm</button>
          <button class="cancel-button">Cancel</button>
        </div>
      </div>
    </div>
    <div class="preview-section" id="product-preview"></div>
  </div>

  <div class="modal" id="settings-modal">
    <div class="modal-content">
      <div class="field-group">
        <label for="section-id">Section ID</label>
        <input type="text" id="section-id" value="8785800">
      </div>
      <div class="field-group">
        <label for="widget-id">Widget ID</label>
        <input type="text" id="widget-id" value="366153">
      </div>
      <div class="field-group">
        <label for="feed-id">Feed ID</label>
        <input type="text" id="feed-id" value="71605">
      </div>
      <button class="cancel-button" onclick="document.getElementById('settings-modal').classList.remove('show')">Close</button>
    </div>
  </div>

  <script>
    const settingsToggle = document.getElementById('settings-toggle');
    const settingsModal = document.getElementById('settings-modal');
    settingsToggle.addEventListener('click', () => {
      settingsModal.classList.toggle('show');
    });

    const themeInput = document.getElementById('widget-theme');
    const previewContainer = document.getElementById('product-preview');

    themeInput.addEventListener('change', fetchRecommendations);

    async function fetchRecommendations() {
      const theme = themeInput.value.trim();
      if (!theme) return;

      const prompt = `10 product suggestions for: ${theme}`;
      const payload = {
        chat: [{ content: prompt, role: 'user' }],
        ctx: { type: 'HOMEPAGE' },
        ctx_type: 'HOMEPAGE',
        feed_id: parseInt(document.getElementById('feed-id').value, 10),
        geoLocation: { geoCode: 'US', geoRegionCode: 'US_NY' },
        rules: [],
        widget_id: document.getElementById('widget-id').value
      };
      const sectionId = document.getElementById('section-id').value;

      previewContainer.innerHTML = '';
      const grid = document.createElement('div');
      grid.className = 'products-grid';
      previewContainer.appendChild(grid);

      try {
        const res = await fetch(`https://muse.dynamicyield.com/v1/muse/completion?section_id=${encodeURIComponent(sectionId)}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });
        const data = await res.json();
        const recommendWidgets = data.chat?.recommend_widgets;
        if (!Array.isArray(recommendWidgets) || !recommendWidgets.length) {
          previewContainer.innerHTML = '<div class="error-message">No recommendations available.</div>';
          return;
        }
        const slotsCount = recommendWidgets[0].slots?.length || 0;
        if (!slotsCount) {
          previewContainer.innerHTML = '<div class="error-message">No recommendation slots found.</div>';
          return;
        }
        const allItems = [];
        for (let i = 0; i < slotsCount; i++) {
          const itemsForSlot = recommendWidgets.map(w => w.slots?.[i]?.item).filter(Boolean);
          allItems.push(...itemsForSlot);
        }
        allItems.forEach(item => {
          const a = document.createElement('a');
          a.className = 'product-card';
          a.href = item.url;
          a.target = '_blank';
          a.innerHTML = `
            <img src="${item.image_url}" alt="${item.name}" />
            <div class="name">${item.name}</div>
            <div class="price">$${parseFloat(item.price).toFixed(2)}</div>
          `;
          grid.appendChild(a);
        });
      } catch (err) {
        console.error(err);
        previewContainer.innerHTML = '<div class="error-message">Error loading products.</div>';
      }
    }
  </script>
</body>
</html>
